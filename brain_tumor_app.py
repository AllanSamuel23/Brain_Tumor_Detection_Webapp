# -*- coding: utf-8 -*-
"""Brain Tumor App.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ceHKKXRs-K9ukLX5zkKlYSYHL3ZE-SUX
"""

import streamlit as st #importing streamlit and tensorflow
import tensorflow as tf
import cv2
import keras
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Conv2D, MaxPooling2D, BatchNormalization, Flatten
import numpy as np
from PIL import Image ,ImageOps
import pickle

st.set_option('deprecation.showfileUploaderEncoding',False)

@st.cache(allow_output_mutation=True) 

def load_model(): #loading our model
  model = tf.keras.models.load_model('/gdrive/MyDrive/brain_tumor/tumormodel/brain_tumor_model_hist.h5')
  return model

  model = load_model()

st.title("Brain Tumor Detection")


st.write("""
Brain Tumors are complex. There are a lot of abnormalities in the sizes and location of the brain tumor(s). 
This makes it really difficult for complete understanding of the nature of the tumor. 
Also, a professional Neurosurgeon is required for MRI analysis. 
Often times in developing countries the lack of skillful doctors and lack of knowledge about tumors makes it 
really challenging and time-consuming to generate reports from MRIâ€™.
So an automated system on Cloud can solve this problem.
Application of automated classification techniques using Machine Learning(ML) and Artificial Intelligence(AI)has 
consistently shown higher accuracy than manual classification. 
Hence, proposing a system performing detection and classification by using Deep Learning Algorithms 
using ConvolutionNeural Network (CNN), Artificial Neural Network (ANN), and TransferLearning (TL) would be 
helpful to doctors all around the world.

""")

file=st.file_uploader("Please upload your MRI Scan",type = ["jpg","png"]) #accepting the image input from the user

def import_and_predict(image_data,model): #our prediction method that will accept the data and the model and would give us a prediction
  size = (150,150)
  image1 = ImageOps.fit(image_data,size,Image.ANTIALIAS)
  image = ImageOps.grayscale(image1)
  img = np.asarray(image)
  img_reshape = img[np.newaxis,...]
  #img_reshape = img_reshape/255.0
  img_reshape = img.reshape(1,150,150,1)
  prediction = model.predict(img_reshape)
  return prediction

if file is None:
  st.markdown("<h5 style='text-align: center; color: Black;'>Please Upload a File</h5>", unsafe_allow_html=True)
else:
  image = Image.open(file)
  st.image(image,use_column_width = True)
  predictions = import_and_predict(image,model)
  class_names = ['glioma_tumor','meningioma_tumor','no_tumor','pituitary_tumor']
  string = "The patient most likely has:"+ class_names[np.argmax(predictions)]
  st.success(string)
  #st.success(predictions)

